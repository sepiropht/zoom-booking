import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useState, useEffect } from 'react'
import { Scheduler, WeekView } from '@progress/kendo-react-scheduler'
import { Day } from '@progress/kendo-date-math'
import { intervalToDuration } from 'date-fns'

const SSR = typeof window === 'undefined'
interface Task {
  TaskID: number
  OwnerID: number
  Title: string
  Description: string
  StartTimezone: null
  Start: Date
  End: Date
  EndTimezone: null
  RecurrenceRule: ''
  RecurrenceID: null
  RecurrenceException: null
  isAllDay: false
}
function getQueryVariable(variable: string): string {
  var query = window.location.search.substring(1)
  var vars = query.split('&')
  for (var i = 0; i < vars.length; i++) {
    var pair = vars[i].split('=')
    if (decodeURIComponent(pair[0]) == variable) {
      return decodeURIComponent(pair[1])
    }
  }
  return ''
}

const Booking: NextPage = () => {
  const [data, setData] = useState<Array<Task>>([])
  const [accessToken, setAccessToken] = useState('')

  useEffect(() => {
    async function fecthAccessToken() {
      if (!SSR) {
        const code = getQueryVariable('code')
        const rawResponse = await fetch('api/accessToken', {
          method: 'POST',
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ code }),
        })
        const { accessToken } = await rawResponse.json()
        setAccessToken(accessToken)
      }
    }
    fecthAccessToken()
  })

  return (
    <div className={styles.container}>
      <Head>
        <title>Zoom Booking</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://kendo.cdn.telerik.com/themes/5.0.1/default/default-main.css"
        ></link>
        <link
          href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
          rel="stylesheet"
          integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"
        ></link>
      </Head>

      <main className={styles.main}>
        {!SSR ? (
          <Scheduler
            data={data}
            editable={true}
            onDataChange={(event) => {
              if (event.created.length) {
                const addedTask = event.created.pop()
                const start_time = addedTask.start
                const topic = addedTask.title
                const type = 2
                const { minutes } = intervalToDuration({
                  start: start_time,
                  end: addedTask.end,
                })

                fetch('api/booking', {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    start_time,
                    topic,
                    type,
                    duration: minutes,
                    accessToken,
                  }),
                }).then(() => console.log('meeting created !'))

                setData([addedTask, ...data])
              } else if (event.deleted.length) {
                const deletedTask = event.deleted.pop()
                setData(
                  data.filter((task) => task.TaskID !== deletedTask.TaskID)
                )
              }
            }}
          >
            <WeekView title="Full Week" workWeekStart={Day.Monday} />
          </Scheduler>
        ) : null}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://github.com/sepiropht"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by <span className={styles.logo}>sepiropht</span>
        </a>
      </footer>
    </div>
  )
}

export default Booking
